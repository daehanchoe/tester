{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/choedaehan/Desktop/trip2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _createForOfIteratorHelper from\"/Users/choedaehan/Desktop/trip2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";var _templateObject;import React,{useState}from\"react\";import styled from\"styled-components\";import*as context from\"../../QuestionContext\";import{list}from\"../../setDate\";import{questionAndTagListCount}from\"../../data/cosultListMeta\";import{getType}from\"../../units\";import empty_heart_icon from\"../../assets/icons/empty_heart_icon.svg\";import filled_heart_icon from\"../../assets/icons/filled_heart_icon.svg\";import{useHistory}from\"react-router-dom\";import{postResult}from\"../../api\";import ReactTouchEvents from\"react-touch-events\";export default function QuestionComponent(){var totalCount=context.useTotalCount();var id=totalCount-1;var setTotalCount=context.useSetTotalCount();var questionCount=context.useQuestionCount();var setQuestionCount=context.useSetQuestionCount();var result=context.useResultState();var setResult=context.useSetResult();var history=useHistory();function setReusultAndIncreaseId(data){if(questionCount===questionAndTagListCount){result[14]=data;setResult(result.concat());// >>>>>>>>>>>>>>>FIXME: seperate this code<<<<<<<<<<<<<<\n// >>>>>>>>>>>>>>>NOTE: (start) count and get character<<<<<<<<<<<<<<\nvar extrovert=0;// 내외향성\nvar open=0;// 개폐쇄성\nvar cnt=1;var tag=\"\";var selected_char=\"\";var _iterator=_createForOfIteratorHelper(result),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var num=_step.value;if(cnt!==15){if(cnt%2!==0)extrovert=extrovert+num;else if(cnt%2===0)open=open+num;}else{tag=num;}cnt++;}// 내외향성 // 개폐쇄성\n}catch(err){_iterator.e(err);}finally{_iterator.f();}if(extrovert<0&&open<0){selected_char=\"Buddy\";}else if(extrovert<0&&open>0){selected_char=\"Tommy\";}else if(extrovert>0&&open<0){selected_char=\"Wigo\";}else if(extrovert>0&&open>0){selected_char=\"Willy\";}// >>>>>>>>>>>>>>>(end) count and get character<<<<<<<<<<<<<<\n// >>>>>>>>>>>>>>>NOTE: call api to post result<<<<<<<<<<<<<<\nvar resultArray=result.slice(0,result.length-1);postResult(resultArray,tag,selected_char,extrovert,open);// >>>>>>>>>>>>>>>NOTE: history push to result page<<<<<<<<<<<<<<\nhistory.push({pathname:\"/result\",state:{selected_char:selected_char,tag:tag}});}else if(questionCount<questionAndTagListCount){result[questionCount-1]=data;setResult(result.concat());setTotalCount(totalCount+1);// 22가되면 끝나야돼\nsetQuestionCount(questionCount+1);}}return/*#__PURE__*/React.createElement(QuestionStyled,null,getType(list[id])===\"question\"?/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(ReactTouchEvents,{onTap:function onTap(){return setReusultAndIncreaseId(1);}},/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"p\",null,list[id].content.multipleChoice[0].split(\"\\n\").map(function(line,_){return/*#__PURE__*/React.createElement(\"span\",{key:_},line,/*#__PURE__*/React.createElement(\"br\",null));})),/*#__PURE__*/React.createElement(\"span\",{className:\"empty-heart\"},/*#__PURE__*/React.createElement(\"img\",{src:empty_heart_icon,alt:\"heart\"})),/*#__PURE__*/React.createElement(\"span\",{className:\"fill-heart\"},/*#__PURE__*/React.createElement(\"img\",{src:filled_heart_icon,alt:\"heart\"})))),/*#__PURE__*/React.createElement(ReactTouchEvents,{onTap:function onTap(){return setReusultAndIncreaseId(-1);}},/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"p\",null,list[id].content.multipleChoice[1].split(\"\\n\").map(function(line,_){return/*#__PURE__*/React.createElement(\"span\",{key:_},line,/*#__PURE__*/React.createElement(\"br\",null));})),/*#__PURE__*/React.createElement(\"span\",{className:\"empty-heart\"},/*#__PURE__*/React.createElement(\"img\",{src:empty_heart_icon,alt:\"heart\"})),/*#__PURE__*/React.createElement(\"span\",{className:\"fill-heart\"},/*#__PURE__*/React.createElement(\"img\",{src:filled_heart_icon,alt:\"heart\"}))))):/*#__PURE__*/React.createElement(\"ul\",null,list[id].content.multipleChoice.map(function(tag,number){return/*#__PURE__*/React.createElement(ReactTouchEvents,{onTap:function onTap(){return setReusultAndIncreaseId(number);},key:number},/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"p\",null,tag),/*#__PURE__*/React.createElement(\"span\",{className:\"fill-heart\"},/*#__PURE__*/React.createElement(\"img\",{src:filled_heart_icon,alt:\"heart\"})),/*#__PURE__*/React.createElement(\"span\",{className:\"empty-heart\"},/*#__PURE__*/React.createElement(\"img\",{src:empty_heart_icon,alt:\"icon\"}))));})));}var QuestionStyled=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  li {\\n    width: 100%;\\n    height: 70px;\\n    background: #fff;\\n    padding: 1em;\\n    align-items: center;\\n    color: #000;\\n    cursor: pointer;\\n    display: flex;\\n    justify-content: space-between;\\n  }\\n  li p {\\n    line-height: 140%;\\n  }\\n  li > .fill-heart {\\n    display: none;\\n  }\\n  li > .empty-heart > img {\\n    display: inherit;\\n  }\\n  li:active > .fill-heart {\\n    display: inherit;\\n  }\\n  li img {\\n    width: 20px;\\n    height: 18px;\\n  }\\n  li:active > .empty-heart {\\n    display: none;\\n  }\\n  li:active > .fill-heart {\\n    display: inherit;\\n  }\\n\"])));","map":{"version":3,"sources":["/Users/choedaehan/Desktop/trip2/src/component/consult/QuestionComponent.js"],"names":["React","useState","styled","context","list","questionAndTagListCount","getType","useHistory","postResult","ReactTouchEvents","QuestionComponent","totalCount","useTotalCount","id","setTotalCount","useSetTotalCount","questionCount","useQuestionCount","setQuestionCount","useSetQuestionCount","result","useResultState","setResult","useSetResult","history","setReusultAndIncreaseId","data","concat","extrovert","open","cnt","tag","selected_char","num","resultArray","slice","length","push","pathname","state","content","multipleChoice","split","map","line","_","empty_heart_icon","filled_heart_icon","number","QuestionStyled","div"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport * as context from \"../../QuestionContext\";\nimport { list } from \"../../setDate\";\nimport { questionAndTagListCount } from \"../../data/cosultListMeta\";\nimport { getType } from \"../../units\";\nimport empty_heart_icon from \"../../assets/icons/empty_heart_icon.svg\";\nimport filled_heart_icon from \"../../assets/icons/filled_heart_icon.svg\";\nimport { useHistory } from \"react-router-dom\";\nimport { postResult } from \"../../api\";\nimport ReactTouchEvents from \"react-touch-events\";\n\nexport default function QuestionComponent() {\n  let totalCount = context.useTotalCount();\n  const id = totalCount - 1;\n  const setTotalCount = context.useSetTotalCount();\n  const questionCount = context.useQuestionCount();\n  const setQuestionCount = context.useSetQuestionCount();\n  const result = context.useResultState();\n  const setResult = context.useSetResult();\n  const history = useHistory();\n\n  function setReusultAndIncreaseId(data) {\n    if (questionCount === questionAndTagListCount) {\n      result[14] = data;\n      setResult(result.concat());\n      // >>>>>>>>>>>>>>>FIXME: seperate this code<<<<<<<<<<<<<<\n      // >>>>>>>>>>>>>>>NOTE: (start) count and get character<<<<<<<<<<<<<<\n      let extrovert = 0; // 내외향성\n      let open = 0; // 개폐쇄성\n\n      let cnt = 1;\n      let tag = \"\";\n      let selected_char = \"\";\n\n      for (let num of result) {\n        if (cnt !== 15) {\n          if (cnt % 2 !== 0) extrovert = extrovert + num;\n          else if (cnt % 2 === 0) open = open + num;\n        } else {\n          tag = num;\n        }\n        cnt++;\n      }\n\n      // 내외향성 // 개폐쇄성\n      if (extrovert < 0 && open < 0) {\n        selected_char = \"Buddy\";\n      } else if (extrovert < 0 && open > 0) {\n        selected_char = \"Tommy\";\n      } else if (extrovert > 0 && open < 0) {\n        selected_char = \"Wigo\";\n      } else if (extrovert > 0 && open > 0) {\n        selected_char = \"Willy\";\n      }\n      // >>>>>>>>>>>>>>>(end) count and get character<<<<<<<<<<<<<<\n\n      // >>>>>>>>>>>>>>>NOTE: call api to post result<<<<<<<<<<<<<<\n      const resultArray = result.slice(0, result.length - 1);\n      postResult(resultArray, tag, selected_char, extrovert, open);\n\n      // >>>>>>>>>>>>>>>NOTE: history push to result page<<<<<<<<<<<<<<\n      history.push({\n        pathname: \"/result\",\n        state: { selected_char: selected_char, tag: tag },\n      });\n    } else if (questionCount < questionAndTagListCount) {\n      result[questionCount - 1] = data;\n      setResult(result.concat());\n      setTotalCount(totalCount + 1); // 22가되면 끝나야돼\n      setQuestionCount(questionCount + 1);\n    }\n  }\n\n  return (\n    <QuestionStyled>\n      {getType(list[id]) === \"question\" ? (\n        <ul>\n          <ReactTouchEvents onTap={() => setReusultAndIncreaseId(1)}>\n            <li>\n              <p>\n                {list[id].content.multipleChoice[0]\n                  .split(\"\\n\")\n                  .map((line, _) => (\n                    <span key={_}>\n                      {line}\n                      <br />\n                    </span>\n                  ))}\n              </p>\n              <span className=\"empty-heart\">\n                <img src={empty_heart_icon} alt=\"heart\" />\n              </span>\n              <span className=\"fill-heart\">\n                <img src={filled_heart_icon} alt=\"heart\" />\n              </span>\n            </li>\n          </ReactTouchEvents>\n          <ReactTouchEvents onTap={() => setReusultAndIncreaseId(-1)}>\n            <li>\n              <p>\n                {list[id].content.multipleChoice[1]\n                  .split(\"\\n\")\n                  .map((line, _) => (\n                    <span key={_}>\n                      {line}\n                      <br />\n                    </span>\n                  ))}\n              </p>\n              <span className=\"empty-heart\">\n                <img src={empty_heart_icon} alt=\"heart\" />\n              </span>\n              <span className=\"fill-heart\">\n                {/* <FontAwesomeIcon icon={faHeart} /> */}\n                <img src={filled_heart_icon} alt=\"heart\" />\n              </span>\n            </li>\n          </ReactTouchEvents>\n        </ul>\n      ) : (\n        <ul>\n          {list[id].content.multipleChoice.map((tag, number) => (\n            <ReactTouchEvents\n              onTap={() => setReusultAndIncreaseId(number)}\n              key={number}\n            >\n              <li>\n                <p>{tag}</p>\n                <span className=\"fill-heart\">\n                  {/* <FontAwesomeIcon icon={faHeart} /> */}\n                  <img src={filled_heart_icon} alt=\"heart\" />\n                </span>\n                <span className=\"empty-heart\">\n                  <img src={empty_heart_icon} alt=\"icon\" />\n                </span>\n              </li>\n            </ReactTouchEvents>\n          ))}\n        </ul>\n      )}\n    </QuestionStyled>\n  );\n}\n\nvar QuestionStyled = styled.div`\n  li {\n    width: 100%;\n    height: 70px;\n    background: #fff;\n    padding: 1em;\n    align-items: center;\n    color: #000;\n    cursor: pointer;\n    display: flex;\n    justify-content: space-between;\n  }\n  li p {\n    line-height: 140%;\n  }\n  li > .fill-heart {\n    display: none;\n  }\n  li > .empty-heart > img {\n    display: inherit;\n  }\n  li:active > .fill-heart {\n    display: inherit;\n  }\n  li img {\n    width: 20px;\n    height: 18px;\n  }\n  li:active > .empty-heart {\n    display: none;\n  }\n  li:active > .fill-heart {\n    display: inherit;\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}