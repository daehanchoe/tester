{"ast":null,"code":"import consultList from\"./data/consultList\";var list=consultList;// 15\nvar questionsTags=list.filter(function(data){return data.type===\"question\"||\"tag\";});// length: 14\nvar questions=list.filter(function(data){return data.type===\"question\";});// length: 7\nvar situations=list.filter(function(data){return data.type===\"situation\";});// length:1\nvar tags=list.filter(function(data){return data.type===\"tag\";});// 22\nvar titles=list.map(function(data){return data.content.question;});var types=list.map(function(data){return data.type;});export{list,questions,situations,tags,questionsTags,titles,types};","map":{"version":3,"sources":["/Users/choedaehan/Desktop/trip2/src/setDate.js"],"names":["consultList","list","questionsTags","filter","data","type","questions","situations","tags","titles","map","content","question","types"],"mappings":"AAAA,MAAOA,CAAAA,WAAP,KAAwB,oBAAxB,CAEA,GAAMC,CAAAA,IAAI,CAAGD,WAAb,CAEA;AACA,GAAME,CAAAA,aAAa,CAAGD,IAAI,CAACE,MAAL,CAAY,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,IAAL,GAAc,UAAd,EAA4B,KAAtC,EAAZ,CAAtB,CAEA;AACA,GAAMC,CAAAA,SAAS,CAAGL,IAAI,CAACE,MAAL,CAAY,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,IAAL,GAAc,UAAxB,EAAZ,CAAlB,CAEA;AACA,GAAME,CAAAA,UAAU,CAAGN,IAAI,CAACE,MAAL,CAAY,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,IAAL,GAAc,WAAxB,EAAZ,CAAnB,CAEA;AACA,GAAMG,CAAAA,IAAI,CAAGP,IAAI,CAACE,MAAL,CAAY,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,IAAL,GAAc,KAAxB,EAAZ,CAAb,CAEA;AACA,GAAMI,CAAAA,MAAM,CAAGR,IAAI,CAACS,GAAL,CAAS,SAACN,IAAD,QAAUA,CAAAA,IAAI,CAACO,OAAL,CAAaC,QAAvB,EAAT,CAAf,CAEA,GAAMC,CAAAA,KAAK,CAAGZ,IAAI,CAACS,GAAL,CAAS,SAACN,IAAD,QAAUA,CAAAA,IAAI,CAACC,IAAf,EAAT,CAAd,CAEA,OAASJ,IAAT,CAAeK,SAAf,CAA0BC,UAA1B,CAAsCC,IAAtC,CAA4CN,aAA5C,CAA2DO,MAA3D,CAAmEI,KAAnE","sourcesContent":["import consultList from \"./data/consultList\";\n\nconst list = consultList;\n\n// 15\nconst questionsTags = list.filter((data) => data.type === \"question\" || \"tag\");\n\n// length: 14\nconst questions = list.filter((data) => data.type === \"question\");\n\n// length: 7\nconst situations = list.filter((data) => data.type === \"situation\");\n\n// length:1\nconst tags = list.filter((data) => data.type === \"tag\");\n\n// 22\nconst titles = list.map((data) => data.content.question);\n\nconst types = list.map((data) => data.type);\n\nexport { list, questions, situations, tags, questionsTags, titles, types };\n"]},"metadata":{},"sourceType":"module"}