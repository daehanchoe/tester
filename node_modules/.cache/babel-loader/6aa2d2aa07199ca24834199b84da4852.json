{"ast":null,"code":"var _jsxFileName = \"/Users/choedaehan/Desktop/trip2/src/QuestionContext.js\";\nimport React, { createContext, useContext, useState } from \"react\";\nconst ResultContext = createContext([]);\nconst SetResultContext = createContext(() => {});\nconst TotalCountContext = createContext(1);\nconst SetTotalCountContext = createContext(() => {});\nconst QuestionCountContext = createContext(1);\nconst SetQuestionCountContext = createContext(() => {});\nexport default function QuestionProvider({\n  children\n}) {\n  const [result, setResult] = useState([]); // result에게 데이터를 넘겨주려고 사용.\n  //   totalCount(22), 다음으로 버튼을 누르면 올라가게\n\n  const [totalCount, setTotalCount] = useState(1); // 함수형 컴포넌트를 사용하는 방식.(hook) : count=useState(1), setCount는 밑에서 추가\n  //   questionAndTag(15), handleClick 변수 i 값\n\n  const [questionCount, setQuestionCount] = useState(1); // 함수형 컴포넌트를 사용하는 방식.(hook) : count=useState(1), setCount는 밑에서 추가\n\n  return /*#__PURE__*/React.createElement(SetTotalCountContext.Provider, {\n    value: setTotalCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SetQuestionCountContext.Provider, {\n    value: setQuestionCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SetResultContext.Provider, {\n    value: setResult,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ResultContext.Provider, {\n    value: result,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TotalCountContext.Provider, {\n    value: totalCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(QuestionCountContext.Provider, {\n    value: questionCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 15\n    }\n  }, children))))));\n}\nexport function useResultState() {\n  const result = useContext(ResultContext);\n\n  if (!result) {\n    throw new Error(\"Cannot find UsersProvider\");\n  }\n\n  return result;\n}\nexport function useSetResult() {\n  const result = useContext(SetResultContext);\n\n  if (!result) {\n    throw new Error(\"Cannot find UsersProvider\");\n  }\n\n  return result;\n}\nexport function useTotalCount() {\n  const result = useContext(TotalCountContext);\n\n  if (!result) {\n    throw new Error(\"Cannot find UsersProvider\");\n  }\n\n  return result;\n}\nexport function useSetTotalCount() {\n  const result = useContext(SetTotalCountContext);\n\n  if (!result) {\n    throw new Error(\"Cannot find UsersProvider\");\n  }\n\n  return result;\n}\nexport function useQuestionCount() {\n  const result = useContext(QuestionCountContext);\n\n  if (!result) {\n    throw new Error(\"Cannot find UsersProvider\");\n  }\n\n  return result;\n}\nexport function useSetQuestionCount() {\n  const result = useContext(SetQuestionCountContext);\n\n  if (!result) {\n    throw new Error(\"Cannot find UsersProvider\");\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/choedaehan/Desktop/trip2/src/QuestionContext.js"],"names":["React","createContext","useContext","useState","ResultContext","SetResultContext","TotalCountContext","SetTotalCountContext","QuestionCountContext","SetQuestionCountContext","QuestionProvider","children","result","setResult","totalCount","setTotalCount","questionCount","setQuestionCount","useResultState","Error","useSetResult","useTotalCount","useSetTotalCount","useQuestionCount","useSetQuestionCount"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\nconst ResultContext = createContext([]);\nconst SetResultContext = createContext(() => {});\nconst TotalCountContext = createContext(1);\nconst SetTotalCountContext = createContext(() => {});\nconst QuestionCountContext = createContext(1);\nconst SetQuestionCountContext = createContext(() => {});\nexport default function QuestionProvider({ children }) {\n  const [result, setResult] = useState([]); // result에게 데이터를 넘겨주려고 사용.\n  //   totalCount(22), 다음으로 버튼을 누르면 올라가게\n  const [totalCount, setTotalCount] = useState(1); // 함수형 컴포넌트를 사용하는 방식.(hook) : count=useState(1), setCount는 밑에서 추가\n  //   questionAndTag(15), handleClick 변수 i 값\n  const [questionCount, setQuestionCount] = useState(1); // 함수형 컴포넌트를 사용하는 방식.(hook) : count=useState(1), setCount는 밑에서 추가\n\n  return (\n    <SetTotalCountContext.Provider value={setTotalCount}>\n      <SetQuestionCountContext.Provider value={setQuestionCount}>\n        <SetResultContext.Provider value={setResult}>\n          <ResultContext.Provider value={result}>\n            <TotalCountContext.Provider value={totalCount}>\n              <QuestionCountContext.Provider value={questionCount}>\n                {children}\n              </QuestionCountContext.Provider>\n            </TotalCountContext.Provider>\n          </ResultContext.Provider>\n        </SetResultContext.Provider>\n      </SetQuestionCountContext.Provider>\n    </SetTotalCountContext.Provider>\n  );\n}\n\nexport function useResultState() {\n  const result = useContext(ResultContext);\n  if (!result) {\n    throw new Error(\"Cannot find UsersProvider\");\n  }\n  return result;\n}\n\nexport function useSetResult() {\n  const result = useContext(SetResultContext);\n  if (!result) {\n    throw new Error(\"Cannot find UsersProvider\");\n  }\n  return result;\n}\n\nexport function useTotalCount() {\n  const result = useContext(TotalCountContext);\n  if (!result) {\n    throw new Error(\"Cannot find UsersProvider\");\n  }\n  return result;\n}\n\nexport function useSetTotalCount() {\n  const result = useContext(SetTotalCountContext);\n  if (!result) {\n    throw new Error(\"Cannot find UsersProvider\");\n  }\n  return result;\n}\n\nexport function useQuestionCount() {\n  const result = useContext(QuestionCountContext);\n  if (!result) {\n    throw new Error(\"Cannot find UsersProvider\");\n  }\n  return result;\n}\n\nexport function useSetQuestionCount() {\n  const result = useContext(SetQuestionCountContext);\n  if (!result) {\n    throw new Error(\"Cannot find UsersProvider\");\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}