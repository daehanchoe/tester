{"version":3,"sources":["assets/images/tripsoda_icon.png","component/Question.js","layouts/Header.js","pages/Consult.js","pages/Result.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Question","props","title","count","index","QuestionStyled","className","onClick","styled","div","Header","prop","total","HeaderComp","header","Consult","history","useState","result","setCount","list","data","questionList","map","key","handleClick","i","r","length","axios","get","then","res","console","log","ConsultStyled","src","logo","Result","location","state","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8gBAAAA,EAAOC,QAAU,IAA0B,2C,k8BCG5B,SAASC,EAASC,GAC7B,IAAMC,EAAQD,EAAMC,MACdC,EAAQF,EAAME,MACdC,EAAQH,EAAMG,MAEpB,OACI,kBAACC,EAAD,CAAgBC,UAAWH,IAAUC,EAAQ,SAAW,IACpD,wBAAIE,UAAU,kBAAkBJ,GAChC,4BACI,wBAAIK,QAAS,kBAAMN,EAAMM,QAAQH,EAAO,KAAxC,sBACA,wBAAIG,QAAS,kBAAMN,EAAMM,QAAQH,GAAQ,KAAzC,qCAMhB,IAAIC,EAAiBG,IAAOC,IAAV,K,62BChBH,SAASC,EAAOC,GAC3B,IAAMC,EAAQD,EAAKC,MACbT,EAAQQ,EAAKR,MAEnB,OACI,kBAACU,EAAD,KACI,uBAAGP,UAAU,oBAAmB,mCAAc,8BAAOH,IACrD,0BAAMG,UAAU,kBAAkBH,EAAlC,IAA0CS,IAKtD,IAAMC,EAAaL,IAAOM,OAAV,K,0YCND,SAASC,EAAT,GAA8B,EAAXC,QAAY,IAAD,EACbC,mBAAS,IADI,mBAClCC,EADkC,aAEfD,mBAAS,IAFM,mBAElCd,EAFkC,KAE3BgB,EAF2B,KAGnCC,EAAOC,EAAKD,KACZE,EAAeF,EAAKG,KAAI,SAACF,EAAMjB,GACjC,OACI,kBAACJ,EAAD,CAAUwB,IAAKpB,EAAOG,QAASkB,EAAavB,MAAOmB,EAAMjB,MAAOA,EAAQ,EAAGD,MAAOA,OAI1F,SAASsB,EAAYC,EAAGC,GACpBT,EAAOQ,EAAI,GAAKC,EAChBR,EAAShB,EAAQ,GAEbiB,EAAKQ,SAAWF,GAEhBG,IAAMC,IAAI,YAAYC,MAAK,SAAAC,GACvBC,QAAQC,IAAIF,EAAIX,SAU5B,OACI,kBAACc,EAAD,KACI,kBAACzB,EAAD,CAAQP,MAAOA,EAAOS,MAAOQ,EAAKQ,SAClC,yBAAKtB,UAAU,sBACVgB,GAEL,yBAAKhB,UAAU,QACX,yBAAK8B,IAAKC,QAM1B,IAAMF,EAAgB3B,IAAOC,IAAV,KC/CJ,SAAS6B,EAAT,GAA+B,IAAbC,EAAY,EAAZA,SAG7B,OAFAN,QAAQC,IAAIK,EAASC,MAAMpB,MAGvB,6C,MCUOqB,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW7B,IACjC,kBAAC,IAAD,CAAO4B,KAAK,UAAUC,UAAWN,MCCnBO,QACW,cAA7BC,OAAOP,SAASQ,UAEe,UAA7BD,OAAOP,SAASQ,UAEhBD,OAAOP,SAASQ,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.135e615b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tripsoda_icon.1d7a8f8c.png\";","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport default function Question(props) {\r\n    const title = props.title;\r\n    const count = props.count;\r\n    const index = props.index;\r\n\r\n    return (\r\n        <QuestionStyled className={count === index ? 'active' : ''}>\r\n            <h2 className=\"question-title\">{title}</h2>\r\n            <ul>\r\n                <li onClick={() => props.onClick(index, 1)}>그렇다</li>\r\n                <li onClick={() => props.onClick(index, -1)}>그렇지 안다</li>\r\n            </ul>\r\n        </QuestionStyled>\r\n    )\r\n}\r\n\r\nvar QuestionStyled = styled.div`\r\n    display: none;\r\n    opacity: 0;\r\n    transition: opacity 500ms;\r\n\r\n    .question-title {\r\n        color: #222;\r\n        font-weight: bold;\r\n        font-size: 30px;\r\n        margin-bottom: 100px;\r\n        height: 40px;\r\n    }\r\n\r\n    &.active {\r\n        display: block;\r\n        opacity: 1;\r\n    }\r\n\r\n    li {\r\n        width: 100%;\r\n        height: 107px;\r\n        background: #2f3438;\r\n        border-radius: 10px;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        font-size: 20px;\r\n        color: #fff;\r\n        font-weight: bold;\r\n        cursor: pointer;\r\n    }\r\n\r\n    li:first-child {\r\n        margin-bottom: 20px;\r\n    }\r\n\r\n    li:active {\r\n        background: #35c5f0;\r\n    }\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport default function Header(prop) {\r\n    const total = prop.total;\r\n    const count = prop.count;\r\n\r\n    return (\r\n        <HeaderComp>\r\n            <p className=\"current-question\"><span>Q</span><span>{count}</span></p>\r\n            <span className=\"total-question\">{count}/{total}</span>\r\n        </HeaderComp>\r\n    );\r\n}\r\n\r\nconst HeaderComp = styled.header`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-top: 50px;\r\n\r\n    .current-question span {\r\n        float: left;\r\n        color: #35c5f0;\r\n        font-weight: bold;\r\n    }\r\n\r\n    .current-question span:first-child {\r\n        font-size: 30px;\r\n    }\r\n\r\n    .current-question span:last-child {\r\n        font-size: 29px;\r\n        margin-top: 2px;\r\n        margin-left: 4px;\r\n    }\r\n\r\n    .total-question {\r\n        height: 31px;\r\n        width: 71px;\r\n        border-radius: 17px;\r\n        background: #eaebef;\r\n        text-align: center;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        color: #222;\r\n        font-weight: bold;\r\n        font-size: 14px;\r\n        letter-spacing: 3px;\r\n        padding-left: 7px;\r\n    }\r\n`;\r\n","import React, { useState } from 'react';\r\nimport data from '../data/data.json';\r\nimport styled from 'styled-components';\r\nimport Question from '../component/Question'; \r\nimport Header from '../layouts/Header';\r\nimport axios from 'axios';\r\n\r\nimport logo from '../assets/images/tripsoda_icon.png'\r\n\r\nexport default function Consult({ history }) {\r\n    const [result, setResult] = useState([]);\r\n    const [count, setCount] = useState(1);\r\n    const list = data.list;\r\n    const questionList = list.map((data, index) => {\r\n        return (\r\n            <Question key={index} onClick={handleClick} title={data} index={index + 1} count={count} />            \r\n        );\r\n    });\r\n\r\n    function handleClick(i, r) {\r\n        result[i - 1] = r;\r\n        setCount(count + 1);\r\n\r\n        if (list.length === i) {\r\n\r\n            axios.get('/getData').then(res =>{\r\n                console.log(res.data)\r\n            });\r\n\r\n            // history.push({\r\n            //     pathname: '/result',\r\n            //     state: { list: result }\r\n            // });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ConsultStyled>\r\n            <Header count={count} total={list.length} />\r\n            <div className=\"question-container\">\r\n                {questionList}\r\n            </div>\r\n            <div className=\"logo\">\r\n                <img src={logo}/>\r\n            </div>\r\n        </ConsultStyled>\r\n    )\r\n};\r\n\r\nconst ConsultStyled = styled.div`\r\n    max-width: 752px;\r\n    margin: 0 auto;\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    padding: 0 10px;\r\n    \r\n    .question-container {\r\n        margin-top: 100px;\r\n    }\r\n\r\n    .logo {\r\n        display: flex;\r\n        justify-content: center;\r\n        padding-top: 30px;\r\n    }\r\n`;","import React from 'react';\r\n\r\nexport default function Result({ location }) {\r\n    console.log(location.state.list);\r\n\r\n    return (\r\n        <div>결과</div>\r\n    )\r\n}","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Consult from './pages/Consult';\nimport Result from './pages/Result';\n\nimport 'reset-css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Route exact path=\"/\" component={Consult} />\n      <Route path=\"/result\" component={Result} />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}